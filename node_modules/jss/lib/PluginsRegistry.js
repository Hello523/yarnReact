'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PluginsRegistry = function () {
  function PluginsRegistry() {
    _classCallCheck(this, PluginsRegistry);

    this.ruleCreators = [];
    this.ruleProcessors = [];
    this.sheetProcessors = [];
  }

  _createClass(PluginsRegistry, [{
    key: 'onCreateRule',


    /**
     * Call `onCreateRule` hooks and return an object if returned by a hook.
     */
    value: function onCreateRule(name, decl, options) {
      for (var i = 0; i < this.ruleCreators.length; i++) {
        var rule = this.ruleCreators[i](name, decl, options);
        if (rule) return rule;
      }
      return null;
    }

    /**
     * Call `onProcessRule` hooks.
     */

  }, {
    key: 'onProcessRule',
    value: function onProcessRule(rule) {
      if (rule.isProcessed) return;
      for (var i = 0; i < this.ruleProcessors.length; i++) {
        this.ruleProcessors[i](rule, rule.options.sheet);
      }
      rule.isProcessed = true;
    }

    /**
     * Call `onProcessSheet` hooks.
     */

  }, {
    key: 'onProcessSheet',
    value: function onProcessSheet(sheet) {
      for (var i = 0; i < this.sheetProcessors.length; i++) {
        this.sheetProcessors[i](sheet);
      }
    }

    /**
     * Register a plugin.
     * If function is passed, it is a shortcut for `{onProcessRule}`.
     */

  }, {
    key: 'use',
    value: function use(plugin) {
      if (typeof plugin === 'function') {
        this.ruleProcessors.push(plugin);
        return;
      }

      if (plugin.onCreateRule) this.ruleCreators.push(plugin.onCreateRule);
      if (plugin.onProcessRule) this.ruleProcessors.push(plugin.onProcessRule);
      if (plugin.onProcessSheet) this.sheetProcessors.push(plugin.onProcessSheet);
    }
  }]);

  return PluginsRegistry;
}();

exports['default'] = PluginsRegistry;